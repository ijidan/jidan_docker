


docker run -d -p 8100:80 -p 8443:443 \
	-v /home/nginx/www:/usr/share/nginx/html \
	-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \
	-v /home/nginx/conf/conf.d:/etc/nginx/conf.d \
	-v /home/nginx/log:/var/log/nginx \
	--link consul:consul \
	--name nginx-consul-template-docker nginx-consul-template-image:latest


docker run -d -p 8100:80 -p 8443:443 \
	-v /Users/mac/docker-micro-services/nginx/www:/usr/share/nginx/html \
	-v /Users/mac/docker-micro-services/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \
	-v /Users/mac/docker-micro-services/nginx/conf/conf.d:/etc/nginx/conf.d \
	-v /Users/mac/docker-micro-services/nginx/log:/var/log/nginx \
	--link consul:consul \
	--name nginx-consul-template-docker nginx-consul-template-image:latest



docker run -d -p 8400:8400 -p 8500:8500 -p 8600:53/udp \
	-h consul --name consul progrium/consul -server -advertise 172.16.65.155 -bootstrap -ui-dir /ui

#-advertise ip 表示ctmpl映射时的ip地址。也是注册consul时，ui上面显示的地址。
	
	
docker run -d -v /var/run/docker.sock:/tmp/docker.sock \
	--name registrator -h registrator --link consul:consul \
	gliderlabs/registrator:latest consul://consul:8500







docker run -d -p 8400:8400 -p 8500:8500 -p 8600:53/udp -h consul --name consul progrium/consul -server -advertise $CONSUL_ADDR -bootstrap -ui-dir /ui CONSUL_ADDR="$(docker inspect -f '{{.NetworkSettings.IPAddress}}' consul)"
docker run -d -v /var/run/docker.sock:/tmp/docker.sock --name registrator -h registrator --link consul:$CONSUL_ADDR gliderlabs/registrator:latest consul://$CONSUL_ADDR:8500


docker pull progrium/consul    
docker run -d --name node1 -h node1 progrium/consul -server -bootstrap-expect 3 JOIN_IP="$(docker inspect -f '{{.NetworkSettings.IPAddress}}' node1)"    
docker run -d --name node2 -h node2 progrium/consul -server -join $JOIN_IP    
docker run -d --name node3 -h node3 progrium/consul -server -join $JOIN_IP    
docker run -d -p 8400:8400 -p 8500:8500 -p 8600:53/udp --name node4 -h node4 pro




{{ services "@<DATACENTER>" }}

使用tag
{{ range $tag, $services := service "web" | byTag }}{{ $tag }}
{{ range $services }} server {{ .Name }} {{ .Address }}:{{ .Port }}
{{ end }}{{ end }}

使用tab包含
{{ if .Tags | contains "production" }}
# ...
{{ end }}

{{ if containsAll $requiredTags .Tags }}
# ...
{{ end }}




upstream web {    
    ip_hash;    
    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream    
    # least_conn;    
    # least_time;    
{{range service "web"}}    
    server {{.Address}}:{{.Port}} fail_timeout=0;    
{{end}}    
    keepalive 64;    
}

server {   
    listen 80;    
    server_name ipaddress;

    location / {   
        client_max_body_size    0;    
        proxy_connect_timeout 300s;    
        proxy_send_timeout   900;    
        proxy_read_timeout   900;    
        proxy_buffer_size    32k;    
        proxy_buffers      4 32k;    
        proxy_busy_buffers_size 64k;    
        proxy_redirect     off;    
        proxy_hide_header  Vary;    
        proxy_set_header   Accept-Encoding '';    
        proxy_set_header   Host   $host;    
        proxy_set_header   Referer $http_referer;    
        proxy_set_header   Cookie $http_cookie;    
        proxy_set_header   X-Real-IP  $remote_addr;    
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;    
        proxy_set_header   Host $host;    
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;           
        proxy_headers_hash_max_size 51200;    
        proxy_headers_hash_bucket_size 6400;    
        proxy_pass          http://web/;    
    }    
}



docker run -d -p 8400:8400 -p 8500:8500 -p 8600:53/udp -h consul --name consul progrium/consul -server -bootstrap

docker run -d -v /var/run/docker.sock:/tmp/docker.sock --name registrator -h registrator gliderlabs/registrator:latest consul://consul:8500



docker run -d -p 8100:80 -p 8443:443 \
	-v /home/nginx/www:/usr/share/nginx/html \
	-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \
	-v /home/nginx/conf/conf.d:/etc/nginx/conf.d:rw \
	-v /home/nginx/log:/var/log/nginx:rw \
	-e CONSUL_ADDR=consul:8500 \
	--link consul:consul \
	--name nginx-consul-template-docker nginx-consul-template-image:latest 
	
	
	
	

docker run -d -p 8400:8400 -p 8500:8500 -p 8600:53/udp -h consul --name consul progrium/consul -server -advertise $DOCKER_IP -bootstrap -ui-dir /ui -data-dir /tmp/consul

docker run -d -v /var/run/docker.sock:/tmp/docker.sock --name registrator -h registrator gliderlabs/registrator:latest consul://consul:8500


docker run -d -p 8400:8400 -p 8500:8500 -p 8600:53/udp -h consul --name consul progrium/consul -server -advertise 172.16.65.155 -bootstrap -ui-dir /ui
docker run -d -v /var/run/docker.sock:/tmp/docker.sock --name registrator -h registrator --link consul:consul gliderlabs/registrator:latest consul://consul:8500




#-consul-addr=consul:8500 \
#     -template "/etc/consul-templates/nginx.conf.ctmpl:/etc/nginx/conf.d/app.conf:nginx -s reload"


#consul-template -consul=$CONSUL_URL -template="/templates/service.ctmpl:/etc/nginx/conf.d/service.conf:service nginx reload"

#exec consul-template \
#     -consul-addr=consul:8500 \
#     -template "/etc/consul-templates/nginx.conf.ctmpl:/etc/nginx/conf.d/app.conf:nginx -s reload"
	 

#consul-template \
#	-consul-addr=$CONSUL_ADDR \
#	-template="$CONSUL_TEMPLATE:/etc/nginx/conf.d/default.conf:nginx -s reload"

#consul-template -consul-addr=$CONSUL_ADDR -template="$CONSUL_TEMPLATE:/etc/nginx/conf.d/default.conf:/start-or-reload-nginx.sh"




创建nginx脚本
https://www.cnblogs.com/cjsblogs/p/9173440.html
官方及网上大部分的启动nginx-consul-template容器最后ENTRYPOINT都为nginx -sreload，
但是因为在重制镜像的时候会将nginx镜像中ENTRYPOINT的nginx -g 'daemonoff'给覆盖掉，
导致容器在启动的时候nginx没有启动，而nginx -s reload会去读/run/nginx.pid，
如果没有则reload失败，所以这里新建了一个nginx启动及重启的脚本。
	#!/bin/bash
	if nginx -t>/dev/null; then
		if [[ -s /var/run/nginx.pid ]]; then
			nginx -s reload
			if [[ $? != 0 ]]; then
				rm -f /var/run/nginx.pid
				nginx -c /etc/nginx/nginx.conf
			fi
		else
			nginx -c /etc/nginx/nginx.conf
		fi
	fi

